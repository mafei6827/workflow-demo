# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: deploy to maven central

on:
  push:
    tags:
      - v[0-9].[0-9].[0-9]

jobs:
  publish-maven-central:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Set up Apache Maven Central
      uses: actions/setup-java@v1
      with: # running setup-java again overwrites the settings.xml
        java-version: 1.8
        server-id: sonatype-nexus-repository # Value of the distributionManagement/repository/id field of the pom.xml
        server-username: MAVEN_USERNAME # env variable for username in deploy
        server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
        gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

    - name: Publish to Apache Maven Central
      run: mvn clean deploy -P maven-central-deploy -pl module2,module3
      env:
        MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
        MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

  publish-bos-repo:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Set up BoS maven repo
        uses: actions/setup-java@v1
        with: # running setup-java again overwrites the settings.xml
          java-version: 1.8
          server-id: bos-repo # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: BOS_REPO_AK # env variable for username in deploy
          server-password: BOS_REPO_SK # env variable for token in deploy

      - name: Publish to Apache Maven Central
        run: mvn clean deploy -P bos-deploy -pl module3,module2 -am
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          BOS_REPO_AK: ${{ secrets.BOS_REPO_AK }}
          BOS_REPO_SK: ${{ secrets.BOS_REPO_SK }}
